import numpy as np
import random

class ConnectFourAgent():

    def __init__(
            self,
            model,
            config,
            maxDepth
    ):
        self.model = model
        self.self.config = config
        self.maxDepth = maxDepth

    def drop_piece(self, grid, col, mark):
        next_grid = grid.copy()
        for row in range(self.config.rows-1, -1, -1):
            if next_grid[row][col] == 0:
                break
        next_grid[row][col] = mark
        return next_grid

    def check_window(self, window, n_disks, mark):
        return window.count(mark) == n_disks and window.count(0) == self.config.inarow - n_disks

    def count_windows(self, grid, n_disks, mark):
        n_windows = 0

        # horizontal
        for row in range(self.config.rows):
            for col in range(self.config.columns - self.config.inarow + 1):
                window = list(grid[row, col: col + self.config.inarow])
                if self.check_window(window, n_disks, mark):
                    n_windows += 1
        
        # vertical
        for row in range(self.config.rows - self.config.inarow + 1):
            for col in range(self.config.columns):
                window = list(grid[row: row + self.config.inarow, col])
                if self.check_window(window, n_disks, mark):
                    n_windows += 1

        # positive diagonal
        for row in range(self.config.rows - self.config.inarow + 1):
            for col in range(self.config.columns - self.config.inarow + 1):
                window = list(grid[range(row, row + self.config.inarow), range(col, col + self.config.inarow)])
                if self.check_window(window, n_disks, mark):
                    n_windows += 1

        # negative diagonal
        for row in range(self.config.inarow - 1, self.config.rows):
            for col in range(self.config.columns - self.config.inarow + 1):
                window = list(grid[range(row, row - self.config.inarow, -1), range(col, col + self.config.inarow)])
                if self.check_window(window, n_disks, mark):
                    n_windows += 1
            
        return n_windows

    # Helper function for minimax: calculates value of heuristic for grid
    def get_terminal_value(self, grid, mark):
        num_fours = self.count_windows(grid, 4, mark)
        num_fours_opp = self.count_windows(grid, 4, mark%2+1)
        score = - 1e4*num_fours_opp + 1e6*num_fours
        return score

    def get_grid_value(self, grid):
        obs_tensor, _ = self.model.policy.obs_to_tensor(np.array(grid).reshape(1, self.config.rows, self.config.columns))
        state_value = self.model.policy.predict_values(obs_tensor).tolist()[0][0]
        return state_value

    # Helper function for minimax: checks if agent or opponent has four in a row in the window
    def is_terminal_window(self, window):
        return window.count(1) == self.config.inarow or window.count(2) == self.config.inarow

    # Helper function for minimax: checks if game has ended
    def is_terminal_node(self, grid):
        # Check for draw 
        if list(grid[0, :]).count(0) == 0:
            return True
        # Check for win: horizontal, vertical, or diagonal
        # horizontal 
        for row in range(self.config.rows):
            for col in range(self.config.columns-(self.config.inarow-1)):
                window = list(grid[row, col:col+self.config.inarow])
                if self.is_terminal_window(window):
                    return True
        # vertical
        for row in range(self.config.rows-(self.config.inarow-1)):
            for col in range(self.config.columns):
                window = list(grid[row:row+self.config.inarow, col])
                if self.is_terminal_window(window):
                    return True
        # positive diagonal
        for row in range(self.config.rows-(self.config.inarow-1)):
            for col in range(self.config.columns-(self.config.inarow-1)):
                window = list(grid[range(row, row+self.config.inarow), range(col, col+self.config.inarow)])
                if self.is_terminal_window(window,):
                    return True
        # negative diagonal
        for row in range(self.config.inarow-1, self.config.rows):
            for col in range(self.config.columns-(self.config.inarow-1)):
                window = list(grid[range(row, row-self.config.inarow, -1), range(col, col+self.config.inarow)])
                if self.is_terminal_window(window):
                    return True
                
        return False

    def minimax(self, node, depth, maximizingPlayer, mark):
        isTerminal = self.is_terminal_node(node)
        if depth == 0:
            return self.get_grid_value(node)
        if isTerminal:
            return self.get_terminal_value(node, mark)
        
        valid_moves = [col for col in range(self.config.columns) if node[0, col] == 0]

        if maximizingPlayer:
            value = -np.Inf
            for move in valid_moves:
                child = self.drop_piece(node, move, mark)
                value = max(value, self.minimax(child, depth-1, False, mark))
            return value
        else:
            value = np.Inf
            for move in valid_moves:
                child = self.drop_piece(node, move, mark%2+1)
                value = min(value, self.minimax(child, depth-1, True, mark))
            return value


    # Uses minimax with alphabeta pruning to calculate value of dropping piece in selected column
    def score_move_minimax(self, grid, col, mark, nsteps):
        next_grid = self.drop_piece(grid, col, mark)
        score = self.minimax(next_grid, nsteps-1, False, mark)
        return score



def agent_minimax(obs, config):
    
    N_STEPS = 3

    valid_moves = [col for col in range(self.config.columns) if obs.board[col] == 0]
    grid = np.asarray(obs.board).reshape(self.config.rows, self.config.columns)
    scores = dict(zip(valid_moves, [score_move_minimax(grid, move, obs.mark, self.config, N_STEPS)
                                    for move in valid_moves]))
    max_score = max(scores.values())
    max_moves = [key for key in scores.keys() if scores[key] == max_score]
    move = random.choice(max_moves)
    
    return move